package grind75 // import "github.com/davidn5013/leetcode/grind75"

Package grind75 75 questions customize leetCode study

FUNCTIONS

func AddBinary(a string, b string) (res string)
    AddBinary add too a string of binaries "11"+"1"="100". Arbitrary length

func CanConstruct(a string, b string) bool
    CanConstruct 0383 can string a letter be taken out of string b a taken from
    b false aa taken from ab false aa taken from aab true

func ClimbStairs(n int) int
    ClimbStairs 0070 in how many distinct ways can you climb to the top of n
    stairs? This a iterativel fast version.

    The number of ways to climb the stairs is equal to the sum of the number of
    ways to climb the stairs from the previous step and the number of ways to
    climb the stairs from two steps ago.

    In other words, if we let f(n) be the number of ways to climb the stairs
    starting from the nth step, then we have the recurrence: f(n) = f(n - 1) +
    f(n - 2)

    We can start the recursion with the base cases: f(1) = 1 (there is only 1
    way to climb 1 step) f(2) = 2 (there are 2 ways to climb 2 steps: 1+1 or 2)

    Then, we can use the recurrence to compute the number of ways to climb the
    stairs for n steps:

    f(n) = f(n - 1) + f(n - 2) = f(n - 2) + f(n - 3) + f(n - 2) = f(n - 3) + f(n
    - 4) + f(n - 2) + f(n - 2) = ...

    This is known as the Fibonacci sequence, and it has the closed-form
    solution: f(n) = ((1 + sqrt(5))/2)^n - ((1 - sqrt(5))/2)^n where sqrt(5) is
    the square root of 5.

func ClimbStairsRecursive(n int) int
    ClimbStairsRecursive This the slow recursive version! In how many distinct
    ways can you climb to the top of n stairs?

func ContainDuplicate(nums []int) (res bool)
    ContainDuplicate 0217 true if array has duplicate values

func DiameterOfBinaryTree(root *ds.TreeNode) int
    DiameterOfBinaryTree return the length of the diameter of the tree.

func DistThreeSum(nums []int) [][]int
    DistThreeSum return all the triplets [nums[i], nums[j], nums[k]] such that i
    != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

func DistansToZeroInMatrix(mat [][]int) (res [][]int)
    DistansToZeroInMatrix return distans of nearest o for each cell Exampel
    Input Result 0 0 0 0 0 0 0 1 0 0 1 0 1 1 1 1 2 1 2,1 has 2 because that how
    meen sideway or up that is need to get to 0

func FloodFill(image [][]int, sr, sc, color int) [][]int
    FloodFill 0733 fills the region starting at point (sr,sc) with color and
    returns the resulting grid. Iterative version using array of position.

func HasCycle(head *ds.ListNode) bool
    HasCycle 0141 check for cycle in list returning true if cycle exist

func InsertInterval(intervals [][]int, newInterval []int) (res [][]int)
    InsertInterval add new interval to a array of non-overlapping intervals
    Example [][]int{{1,3},{6,9}} adding []int{2,5} only extend 1,3 to 1,5 an
    result in [][]int{{1,5},{6,9}} [][]int{{1,2},{3,5},{6,7},{8,10},{12,16}}
    adding {4,8} [][]int{{1,2},{3,10},{12,16}} Because the new interval [4,8]
    overlaps with [3,5],[6,7],[8,10].

func InvertTree(root *t.TreeNode) *t.TreeNode
    InvertTree 0226 Resurcive Input: root = [2,1,3] Output: [2,3,1]

func InvertTreeIterative(root *t.TreeNode) *t.TreeNode
    InvertTreeIterative Input: root = [2,1,3] Output: [2,3,1] Not realy need for
    this leetcode

func IsAnagram(s, t string) bool
    IsAnagram 0242 Two word have same letters but diffent order. "nagaram" is
    anagram of "anagram".

func IsBalanced(root *ds.TreeNode) bool
    IsBalanced 0110 test if a simple tree node is balanced

func IsPalindrome(s string) bool
    IsPalindrome 0125 check if the alfanumerics is palindrome in lowercase
    returning true if so

func IsValid(s string) bool
    IsValid 0020. An input string is valid if: Open brackets must be closed
    by the same type of brackets. Open brackets must be closed in the correct
    order. Every close bracket has a corresponding open bracket of the same
    type.

func Kclosest(res [][]int, k int) [][]int
    Kclosest sort input array after distant to zero (0,0) return k part of array
    Original array is intact BUT not it's order!

func Lca(root, p, q *t.TreeNode) *t.TreeNode
    Lca 0235 Lowest Common Ancestor of a Binary Search Tree

func LevelOrder(t *ds.TreeNode) (res [][]int)
    LevelOrder return TreeNode as [][]int

func LongestPalindrome(s string) (res int)
    LongestPalindrome 0409 how many letter in palindrome char mix made by they
    letter, case senitive Support only rune until 256 skip char above

func MajorityElement(nums []int) int
    MajorityElement what number that is the moste in a list Example
    []int{2,2,1,1,1,2,2} hase four number of twos result in : 2

func MaxDepth(root *ds.TreeNode) int
    MaxDepth return its maximum depth of the binary tree TreeNode

func MaxProfit(prices []int) (maxprof int)
    MaxProfit 0121 Return the maximum profit you can achieve from this
    transaction. If you cannot achieve any profit, return 0.

func MaxSubArray(nums []int) int
    MaxSubArray 0053 biggest sum of sub arrays in array Exampel:
    fmt.Println(MaxSubArray([-2,1,-3,4,-1,2,1,-5,4]) Prints out : 6

func MergeTwoSortedLists(l1 *ds.ListNode, l2 *ds.ListNode) *ds.ListNode
    MergeTwoSortedLists 0021 Join two sorted list to one. l1+l2=l2 Warning
    corrupt l1 and changes l2 to two the new join list

func MiddleNode(head *ds.ListNode) *ds.ListNode
    MiddleNode return pointer to middle of list

func ReverseList(head *ds.ListNode) *ds.ListNode
    ReverseList 0206 Reverse a linked list 1,2,3,4,5 -> 5,4,3,2,1 This leadves a
    empty head behind. You have to nil your pointer to Head after this it, look
    in example below Example : listOfNodesReversed := ReverseList(listOfNodes)
    listOfNodes = nil

func Search(nums []int, target int) int
    Search 0704 Given an array of integers nums which is sorted in ascending
    order, and an integer target, search target in nums. If target exists,
    then return its index. Otherwise, return -1.

func SortString(w string) string
    SortString Sort a string alphanumeric order

func SplitOnLetter(s string) (res []string)
    SplitOnLetter split a string on new letter "abccccdd" will result in [a b
    ccc dd] "abcabc" will split in "aa","bb","cc"

func TwoSum(nums []int, target int) []int
    TwoSum 0001. Two Sum Given an array of integers nums and an integer target,
    return indices of the two numbers such that they add up to target. You may
    assume that each input would have exactly one solution, and you may not use
    the same element twice. You can return the answer in any order.

package tools // import "github.com/davidn5013/leetcode/tools"

Package tools Generic function for math, Array, Insert etc

FUNCTIONS

func AbsInt(x int) int
    AbsInt 1=1 -1=1 (by doing -1 * -1 = 1)

func BigIntToBinStr(b *big.Int) string
    BigIntToBinStr Rerturn a big.Int as a String with binary value

func BinStrAdd(s, a string) *big.Int
    BinStrAdd add to string with binary valued and returns it sum as Big.Int
    Example BinStrAdd("111101","10") returns "111111" return 0 convert error and
    print "SetString: Error"

func BinStrToBigInt(s string) *big.Int
    BinStrToBigInt return "101010" return Big.Int with 101010 stored as int

func Copy2dInt(src [][]int) (des [][]int)
    Copy2dInt make copy [][]int 2d array.

func EqualMatrix(a, b [][]int) (res bool)
    EqualMatrix return two are the same [][]int

func EucliDistSquared(x1, y1, x2, y2 int) int
    EucliDistSquared return part of euclidean distance (x1 - x2)2 + (y1 - y2)2

    The full is euclidean distance is (sqrt) âˆš(x1 - x2)2 + (y1 - y2)2) but this
    function is meant to be used to compare the short distance so if the answer
    is square 2 too big does not matter.

    If the correct euclidean distance is need remember to
    int(math.Ceil(float64(EucliDistSquared(x,y)))) the result

    Example fmt.Println(EucliDistSquared(0,0,1,3)) // OutPut : 10

    log.Println(math.Ceil(math.Sqrt(float64(EucliDistSquared(0, 0, 1, 3))))) //
    This is the real distans // OutPut : 4

func InsertAt[K comparable](inp []K, position int, value []K) (res []K, err error)
    InsertAt insert []genric at position in array

func InsertIntAt(inp []int, position int, value []int) (res []int, err error)
    InsertIntAt insert []int at position in array

func MaxInt(x, y int) int
    MaxInt bigest number of x, y in int

func MinInt(x, y int) int
    MinInt smallest number of x, y in int

func Square(n int) int
    Square return n*n.

package ds // import "github.com/davidn5013/leetcode/tools/ds"

Package ds Data Store, Data Structors Exempel NodeTree,Pos,Rune Stack

FUNCTIONS

func PrintTree(root *TreeNode)
    PrintTree print the hollow tree


TYPES

type ListNode struct {
	Val  int
	Next *ListNode
}
    ListNode Linked list of for int values

func JoinTwoList(list1 *ListNode, list2 *ListNode) *ListNode
    JoinTwoList Join two lists same order list1+list2=list1

func MergeTwoListsArr(list1 *ListNode, list2 *ListNode) *ListNode
    MergeTwoListsArr Join two unsorted ListNodes list1+list2=list2 sort new list
    by converting to array

func NewListNode(val int) *ListNode
    NewListNode return pointer too new linked list of int values

func (n *ListNode) Get() int
    Get the value of the current node

func (n *ListNode) Head() *ListNode
    Head return the head node of the list

func (n *ListNode) Insert(val int)
    Insert a new node with value `val` after the current node

func (n *ListNode) MiddleNode() *ListNode
    MiddleNode return pointer to middle of linked list

func (n *ListNode) Set(val int)
    Set the value of the current node

func (n *ListNode) SortArray()
    SortArray Sorts ListNode by converting to array and returning new ListNode

func (n *ListNode) String() (ret string)
    String Stringer for ListNode usage fmt.Println("%s",newLinkelist)

type Pos struct {
	Row int
	Col int
}
    Pos = Position for storing row,col or x,y

func NewPos() *Pos
    NewPos Pointer to new position struct

type Queue struct {
	// Has unexported fields.
}
    Queue 0232 storing int

func NewMyQueue() *Queue
    NewMyQueue Will create a new MyQueue

func (q *Queue) Empty() bool
    Empty Returns true if the queue is empty, false otherwise.

func (q *Queue) Peek() int
    Peek Returns the element at the front of the queue.

func (q *Queue) Pop() (res int)
    Pop Removes the element from the front of the queue and returns it.

func (q *Queue) Push(i int)
    Push Pushes element x to the back of the queue.

type RuneStack struct {
	// Has unexported fields.
}
    RuneStack - Rune stack data structure.

func NewRuneStack() *RuneStack
    NewRuneStack creates a new stack.

func (s *RuneStack) IsEmpty() bool
    IsEmpty returns true if the stack is empty, and false otherwise.

func (s *RuneStack) Pop() (rune, error)
    Pop removes and returns the top item from the stack. If the stack is empty,
    it returns an error.

func (s *RuneStack) Push(item rune)
    Push adds an item to the top of the stack.

type TreeNode struct {
	Val   int
	Left  *TreeNode
	Right *TreeNode
}
    TreeNode Binary tree storing int, left and right

func NewTreeNode() *TreeNode
    NewTreeNode return new pointer to TreeNode

func (t *TreeNode) InsertLeft(val int)
    InsertLeft adds a new node with the given value as the left child of the
    current node. If the current node does not have a left child, it creates a
    new node. TODO Does not work!

func (t *TreeNode) InsertRight(val int)
    InsertRight adds a new node with the given value as the right child of the
    current node. If the current node does not have a right child, it creates a
    new node. TODO Does not work!

func (t *TreeNode) LevelOrderArr() (res [][]int)
    LevelOrderArr return TreeNode as [][]int

func (t *TreeNode) MidOrder()
    MidOrder Print Tree Left -> Data -> Right Example t.Val=3; t.Left.Val=9;
    t.Right.Val=20; t.Right.Left.Val=15; t.Right.Right.Val=7 Print as : 9 3 15
    20 7

func (t *TreeNode) PostOrder()
    PostOrder Print tree Left -> Right -> Data Example t.Val=3; t.Left.Val=9;
    t.Right.Val=20; t.Right.Left.Val=15; t.Right.Right.Val=7 Print as : 9 15 7
    20 3

func (t *TreeNode) PreOrder()
    PreOrder Print tree Data -> left -> right order Example t.Val=3;
    t.Left.Val=9; t.Right.Val=20; t.Right.Left.Val=15; t.Right.Right.Val=7 Print
    as : 3 9 20 15 7

func (t *TreeNode) PrintBreadthFirst(root *TreeNode) (res string)
    PrintBreadthFirst prints the values of the nodes in the binary tree in
    breadth-first order. Not realy need for this leetcode but this give antoher
    view and is a stringer example to keep

func (t *TreeNode) PrintInOrder()
    PrintInOrder prints the values of the nodes in the binary tree in in-order
    traversal order.

func (t *TreeNode) Set(val int)
    Set value root node

func (t *TreeNode) String() string
    Not realy need for this leetcode but this give antoher view and is a
    stringer example to keep

